#!/usr/bin/env Rscript
## R-Forge build system tool chain
## update and print package status

require( "rfTools", lib = "/home/rforge/lib/R/" )

################################################################################
## configuration:

## local library path (this is where the packages (and dependencies get installed to)
maj.version <- paste(R.Version()$maj, unlist(strsplit(R.Version()$min, "[.]"))[1], sep=".")
local_lib <- file.path(Sys.getenv("R_LIBS"), maj.version)
## we have to set 'R_LIBS' again otherwise package dependencies are not found
Sys.setenv("R_LIBS" = local_lib)

## staging area (incoming uncompressed sources submissions)
stmp <- "/srv/rf/staging"

## build root, where the builds/checks are done
build_root <- "/srv/rf/building"
if(!file.exists(build_root))
  dir.create(build_root)

################################################################################

## take a source build and uncompress
src_dir <- rf_takeover_prepared_build(stmp, build_root)

if( is.null(src_dir) ){
  writeLines("No submission found. Exiting.")
  q( save = "no" )
}

## load pkg meta info
load( file.path(build_root, src_dir, "PKG_STAT.rda") )

## setup control file
control <- rf_build_control(path_to_pkg_src  = file.path(build_root, src_dir),            ## R-Forge uncompressed pkg source
                            path_to_pkg_log  = file.path(build_root, src_dir, "RF_LOGS"), ## Log directory
                            path_to_pkg_root = file.path(build_root, src_dir, "RF_PKG_ROOT"), ## R-Forge root (contains /src ,/bin)
                            path_to_local_texmf = "/usr/local/share/texmf",## path to local texmf
                            path_to_local_library = local_lib,             ## path to local pkg library
                            path_to_check_dir = file.path(build_root, src_dir, "RF_PKG_CHECK"), ## path to check dir
                            stoplist = "/srv/R/lib/check_R_stoplist",      ## path to stoplist
                            cpu_time_limit = 600,                          ## CPU time limit
                            mail_domain_name_of_sender = system("hostname -f", intern = TRUE), ## "xmorthanc.wu.ac.at" 
                            mail_relay_server = "",                        ## only necessary with sendEmail
                            mail_programme = "mail")                       ## on Windows: sendEmail

## start building ...
rf_build_packages( rf_pkg_status,
                   platform        = "Linux",
                   architecture    = "x86_64",
                   bioc_url        = "file:///srv/R/Repositories/Bioconductor/release/bioc/",
                   bioc_data       = "file:///srv/R/Repositories/Bioconductor/release/data/annotation",
                   bioc_experiment = "file:///srv/R/Repositories/Bioconductor/release/data/experiment",
                   control         = control )

## check packages
rf_check_packages( rf_pkg_status,
                   platform        = "Linux",
                   architecture    = "x86_64",
                   bioc_url        = "file:///srv/R/Repositories/Bioconductor/release/bioc/",
                   bioc_data       = "file:///srv/R/Repositories/Bioconductor/release/data/annotation",
                   bioc_experiment = "file:///srv/R/Repositories/Bioconductor/release/data/experiment",
                   control         = control )

TAR <- Sys.getenv("TAR")
WINDOWS <- .Platform$OS.type == "windows"
if (!nzchar(TAR)) {
  TAR <- if (WINDOWS) 
    "tar --force-local"
  else "internal"
}

## finally produce a compressed archive of pkg builds and checks,
res <- utils::tar( file.path(stmp, paste("SRC", src_dir, "tar.gz", sep = ".")),
                  src_dir, compression = "gzip", compression_level = 9, tar = TAR,
                  extra_flags = sprintf("-C %s", build_root) )

## cleanup build dir,
unlink(file.path(build_root, src_dir), recursive = TRUE)

## and remove uncompressed src submission
file.remove( file.path(stmp, paste(src_dir, ".tar.gz.processing", sep = "")) )

TRUE
