#!/usr/bin/env /srv/R/bin/Rscript-patched
## R-Forge build system tool chain
## update and print package status

require( "rfTools", lib = "/home/rforge/lib/R/" )

################################################################################
## configuration:

## R-devel path
R_DEVEL <- "/srv/R/bin/R-devel"

## release, patched | devel
is_devel <- R.version[["status"]] == "Under development (unstable)"

## local library path (this is where the packages (and dependencies get installed to)
if( is_devel ){
    maj.version <- paste( R.Version()$maj, unlist(strsplit(R.Version()$min, "[.]"))[1], sep = "." )
    local_lib <- file.path( "/home/rforge/lib/R", sprintf("%s-dev", maj.version) )
} else {
  maj.version <- paste( R.Version()$maj, unlist(strsplit(R.Version()$min, "[.]"))[1], sep = "." )
  local_lib <- file.path("/home/rforge/lib/R", maj.version)
}


## FIXME: block can be removed
## devel
## generates maj.version_devel FIXME: install package and reset directory
#system( "/home/rforge/svn/rfTools/exec/get_devel_meta" )
## loads maj.version_devel
#load( "/srv/rf/staging/rf_meta_devel" )
#local_lib_devel <- file.path("/home/rforge/lib/R", maj.version_devel )


## we have to set 'R_LIBS' again otherwise package dependencies are not found
Sys.setenv("R_LIBS" = local_lib)

## staging area (incoming uncompressed sources submissions)
stmp <- "/srv/rf/staging"

## build root, where the builds/checks are done
build_root <- "/srv/rf/building"
if(!file.exists(build_root))
  dir.create(build_root)

## environment variables from Kurt's check script
Sys.setenv(R_BROWSER="false")
Sys.setenv(R_PDFVIEWER="false")
Sys.setenv("_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_"="true")
Sys.setenv("_R_CHECK_CODETOOLS_PROFILE_"="suppressPartialMatchArgs=false")
Sys.setenv("_R_CHECK_FORCE_SUGGESTS_"="false")
Sys.setenv("_R_CHECK_INSTALL_DEPENDS_"="true")
Sys.setenv("_R_CHECK_SUGGESTS_ONLY_"="true")
Sys.setenv("_R_CHECK_NO_RECOMMENDED_"="true")
Sys.setenv("_R_CHECK_SUPPRESS_RANDR_MESSAGE_"="true")
# Sys.setenv("_R_CHECK_WEAVE_VIGNETTES_"="no")
## And we definitely do not want package-local overrides:
Sys.setenv("_R_CHECK_EXECUTABLES_EXCLUSIONS_"="false")
## And we want license checking ...
Sys.setenv("_R_CHECK_LICENSE_"="true")
## And the additional timings added in R 2.15.0 ...
Sys.setenv("_R_CHECK_TIMINGS_"="0")
Sys.setenv("_R_CHECK_TEST_TIMING_"="yes")
Sys.setenv("_R_CHECK_VIGNETTE_TIMING_"="yes")
## Try using a UTF-8 locale.
Sys.setenv(LANG="en_US.UTF-8")
## But not for sorting ...
Sys.setenv(LC_COLLATE="C")

## Package specific environment variables

## Package: Rmosek
Sys.setenv(PATH=sprintf("%s:/opt/MOSEK/6/tools/platform/linux64x86/bin", Sys.getenv("PATH")))
Sys.setenv(MOSEKLM_LICENSE_FILE="/opt/MOSEK/6/licenses/mosek.lic")
Sys.setenv(PKG_MOSEKHOME="/opt/MOSEK/6/tools/platform/linux64x86")
Sys.setenv(PKG_MOSEKLIB="mosek64")

################################################################################

## take a source build and uncompress
if( !is_devel ){
    src_dir <- rf_takeover_prepared_build(stmp, build_root)
} else {
  src_dir <- Sys.getenv( "RF_SRC_DIR" )
  src_dir <- ifelse( src_dir == "", NULL, src_dir ) 
}

if( is.null(src_dir) ){
    writeLines("No submission found. Exiting.")
    q( save = "no" ) }

## load pkg meta info
load( file.path(build_root, src_dir, "PKG_STAT.rda") )


if( !is_devel ){
## build and check packages patched
Sys.setenv("R_LIBS" = local_lib)

## setup control file
control <- rf_build_control(path_to_pkg_src  = file.path(build_root, src_dir),                ## R-Forge uncompressed pkg source
                            path_to_pkg_log  = file.path(build_root, src_dir, "RF_LOGS"),     ## Log directory
                            path_to_pkg_root = file.path(build_root, src_dir, "RF_PKG_ROOT"), ## R-Forge root (contains /src ,/bin)
                            path_to_local_texmf = "/usr/local/share/texmf",                   ## path to local texmf
                            path_to_local_library = local_lib,                                ## path to local pkg library
			    path_to_local_pkg_libs = file.path(build_root, "PKG_LIBS"),       ## path to local per pkg libraries in case of R-Forge deps
                            path_to_check_dir = file.path(build_root, src_dir, "RF_PKG_CHECK"), ## path to check dir
                            stoplist = file.path(system.file("stoplists", package = "rfTools"), "linux.csv"), ## path to stoplist
                            cpu_time_limit = 600,                                             ## CPU time limit
                            mail_domain_name_of_sender = system("hostname -f", intern = TRUE),## "xmorthanc.wu.ac.at" 
                            mail_relay_server = "",                                           ## only necessary with sendEmail
                            mail_programme = "mail")                                          ## on Windows: sendEmail


## start building ...
rf_build_packages( rf_pkg_status,
                   platform        = "Linux",
                   architecture    = "x86_64",
                   bioc_url        = "file:///srv/R/Repositories/Bioconductor/release/bioc/",
                   bioc_data       = "file:///srv/R/Repositories/Bioconductor/release/data/annotation",
                   bioc_experiment = "file:///srv/R/Repositories/Bioconductor/release/data/experiment",
                   control         = control,
                   Ncpus = 4L)


rf_check_packages( rf_pkg_status,
                   platform        = "Linux",
                   architecture    = "x86_64",
                   bioc_url        = "file:///srv/R/Repositories/Bioconductor/release/bioc/",
                   bioc_data       = "file:///srv/R/Repositories/Bioconductor/release/data/annotation",
                   bioc_experiment = "file:///srv/R/Repositories/Bioconductor/release/data/experiment",
                   control         = control,
                   Ncpus           = 4L)

## now devel
Sys.setenv( "RF_SRC_DIR" = src_dir )

## call R-devel here, will go then to else path
system( sprintf( "%s --vanilla < %s", R_DEVEL, system.file(file.path("exec", "rf_build_packages"), package = "rfTools") ))

} else {

## check packages devel
control_devel <- rf_build_control(path_to_pkg_src  = file.path(build_root, src_dir),                ## R-Forge uncompressed pkg source
                            path_to_pkg_log  = file.path(build_root, src_dir, "RF_LOGS_DEVEL"),     ## Log directory
                            path_to_pkg_root = file.path(build_root, src_dir, "RF_PKG_ROOT"), ## R-Forge root (contains /src ,/bin)
                            path_to_local_texmf = "/usr/local/share/texmf",                   ## path to local texmf
                            path_to_local_library = local_lib,                                ## path to local pkg library
			    path_to_local_pkg_libs = file.path(build_root, "PKG_LIBS_DEVEL"),       ## path to local per pkg libraries in case of R-Forge deps
                            path_to_check_dir = file.path(build_root, src_dir, "RF_PKG_CHECK_DEVEL"), ## path to check dir
                            stoplist = file.path(system.file("stoplists", package = "rfTools"), "linux.csv"), ## path to stoplist
                            cpu_time_limit = 600,                                             ## CPU time limit
                            mail_domain_name_of_sender = system("hostname -f", intern = TRUE),## "xmorthanc.wu.ac.at" 
                            mail_relay_server = "",                                           ## only necessary with sendEmail
                            mail_programme = "mail")                                          ## on Windows: sendEmail


rf_check_packages( rf_pkg_status,
                   platform        = "Linux",
                   architecture    = "x86_64",
                   bioc_url        = "file:///srv/R/Repositories/Bioconductor/devel/bioc/",
                   bioc_data       = "file:///srv/R/Repositories/Bioconductor/devel/data/annotation",
                   bioc_experiment = "file:///srv/R/Repositories/Bioconductor/devel/data/experiment",
                   control         = control_devel,
                   Ncpus           = 4L)

}

if( !is_devel ){
TAR <- Sys.getenv("TAR")
WINDOWS <- .Platform$OS.type == "windows"
if (!nzchar(TAR)) {
  TAR <- if (WINDOWS) 
    "tar --force-local"
  else "internal"
}

## finally produce a compressed archive of pkg builds and checks,
#res <- utils::tar( file.path(stmp, paste("SRC", src_dir, "tar.gz", sep = ".")),
#                  src_dir, compression = "gzip", compression_level = 9, tar = TAR,
#                  extra_flags = sprintf("-C %s", build_root) )
#temporary tar fix
sys_cmd=paste("tar -C", build_root, "-zcf",
                   file.path(stmp, paste("SRC", src_dir, "tar.gz", sep = ".")),
                   src_dir)
system(sys_cmd)

## cleanup build dir,
unlink(file.path(build_root, src_dir), recursive = TRUE)

## cleanup per-pkg lib dir,
unlink(file.path(build_root, "PKG_LIBS"), recursive = TRUE)

## and remove uncompressed src submission
file.remove( file.path(stmp, paste(src_dir, ".tar.gz.processing", sep = "")) )
}

TRUE
